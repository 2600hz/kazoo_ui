<?php

//$json_string = json_encode($_POST);

//$file_handle = fopen('/tmp/webhookpost.json', 'a');
//fwrite($file_handle, $json_string);
//fclose($file_handle);


// https://github.com/hipchat/hipchat-php/blob/master/src/HipChat/HipChat.php

// iterate through known 'integrations': 
// case $_POST['integration'] == "hipchat";
//	// look in user doc for hipchat token + uid
//	// or for now simply read $_POST['hipchat']['uid'] and $_POST['hipchat']['token']
//	perform a get on the remote hipchat user
//	store all settings in array
//	modify necessary value
//	post the entire user structure back to hipchat


// fallback: push decision output to hipchat tech debug room
//  ie:  [ WEBHOOKS } : Event $x fired for $y


// somehow track (via call-id?) when a channel goes to destroy because it was unanswered
// and for cases such as :
	// LOSE_RACE, get info of person who won the call
	// no_answer, take basic info of caller, time, etc
	// and push the data to $knownnotificationmethods
	//	such as hipchat + sms, or hipchat if you're avail and sms if youre idle, or still hipchat if idle and only sms if disconnected entirely

/*
{"call_direction":"inbound","timestamp":"63581075906","account_id":"043a546e37a2e2caa151f91c50d701f5","request":"16048893130@nodomain.com","to":"16048893130@nodomain.com","from":"user_j2fw17@voxteroffice.voxter.sip.voxter.com","call_id":"b2dc0198-58c5-11e4-9bfc-13d8a570ef8c","hook_event":"channel_destroy"}
*/

// ## Thought: when requesting a webhook get added, like for hipchat notices of call events, including simply status changes, include the hipchat uid = token in the webhook 

// ## fallback: using one of the caller id fields (or the call-id to determine the owner without implementing our own function?) iterate down a list of saved notification actions for that user (stored in unique docs saying where to fire copies of a message, ie sms, im, tts, another url, etc) this would make it so enabling extra 3rd party integrations were pretty simple.  

// Look up account ID

// Look in that account DB for mapped webhook notices

// Using account ID, find hipchat token (is the auth token based on account or user?)
// or auth against user specific creds

// Create a riak cluster for cache states (aastra, concurrent call trackina, etc?) 

// curl -X PUT -H "Content-Type: application/json" -d '{ "atlassian_id": null, "created": "2012-03-27T21:43:12", "email": "dayton@voxter.ca", "group": { "id": 20531, "links": { "self": "https://api.hipchat.com/v2/group/20531" }, "name": "Voxter" }, "id": 95488, "is_deleted": false, "is_group_admin": true, "is_guest": false, "last_active": "1413567719", "links": { "self": "https://api.hipchat.com/v2/user/95488" }, "mention_name": "Dayton", "name": "Dayton Turner", "photo_url": "https://s3.amazonaws.com/uploads.hipchat.com/photos/95488/54o1o5e7dc5ux5d_125.jpg", "presence": { "client": { "type": "http://hipchat.com/client/mac", "version": "132" }, "status": "Available", "show": "chat", "is_online": true }, "timezone": "US/Mountain", "title": "CEO", "xmpp_jid": "20531_95488@chat.hipchat.com" }' http://api.hipchat.com/v2/user/dayton%40voxter.ca?auth_token=vCFSkIgybYU0QUQlIsQRv9PNoJLocU2Xlgc2G9S6



// Create the concept of an account db overlay (or a set of keys inside existing docs) to denote special mappings like SMS, webhook delivery address, plan counts on reconciled billable items (summary -> plan), hipchat ID per account/per user (3rd party api tokens etc) freshbooks id, qb id, searchstring in logstash, username for dashboards in grafana, etc...

?>
